plugins {
    id 'base'
    id 'distribution'
    id 'maven-publish'
    id "nebula.ospackage" version "8.4.1"
    id 'at.bxm.svntools' version '2.2'
}

version = '0.2.2-SNAPSHOT'

task cleanDeps {
    if (gradle.startParameter.taskNames.contains("clean") && !project.gradle.startParameter.projectProperties.containsKey("moduleDep")) {
        println "Deleting temporary dependency modules"
        File depsCheckFile = rootProject.file("deps/dependency.txt")
        if (depsCheckFile.exists()) {
            File depsDir = rootProject.file("deps")
            depsDir.listFiles().each() { childFile ->
                if (childFile.name != '_placeholder' && childFile.isDirectory() && childFile.name != ".gradle") {
                    project.delete(childFile)
                }
            }
        } else {
            throw new Exception('Invalid dependency path')
        }
    }
}

clean.dependsOn cleanDeps

subprojects.each { subproject -> evaluationDependsOn(subproject.path) }

subprojects {
    task allDeps(type: DependencyReportTask) {}
}

def createSvnDownloadTask(def moduleName, def svnUrlValue, def targetDirValue) {
    return tasks.create("svnDownload${moduleName}", at.bxm.gradleplugins.svntools.tasks.SvnExport) {
        svnUrl = svnUrlValue
        targetDir = targetDirValue
    }
}

if (file('deps/_placeholder').exists()) {
    // Perform restart for new dependency handling
    def depsLevel
    if (project.gradle.startParameter.projectProperties.containsKey('moduleDep')) {
        depsLevel = project.gradle.startParameter.projectProperties['moduleDep'] + 1
    } else {
        depsLevel = 1
    }
    def artefactBuild = project.tasks.create([name: "depsRebuild_${depsLevel}", type: GradleBuild])
    artefactBuild.buildFile = project.file('build.gradle')
    artefactBuild.tasks = project.gradle.startParameter.taskNames

    def artefactProjectProperties = artefactBuild.startParameter.projectProperties
    def currentProjectProperties = project.gradle.startParameter.projectProperties
    artefactProjectProperties << currentProjectProperties
    artefactProjectProperties << ['moduleDep': depsLevel]

    // Terminate currently invalid tasks
    // TODO: Fix support for other tasks like distZip
    subprojects.each { subproject ->
        if (subproject.tasks.findByPath('assemble') != null) {
            subproject.tasks['assemble'].setDependsOn([])
        }
    }
    if (project.tasks.findByPath('assemble') != null) {
        project.tasks['assemble'].setDependsOn([])
    }

    //    artefactBuild.execute()
}

distZip.dependsOn project(':tools:bined-editor').tasks['launch4j']

ospackage {
    packageName = 'bined'
    if (project.version.endsWith("-SNAPSHOT")) {
        version = project.version.substring(0, project.version.length() - 9)
        release = '0'
        // '0.' + new Date().format('yyyyMMdd') + "dev"
    } else {
        version = project.version
        release = '1'
    }
    arch = NOARCH
    os = LINUX
    packageGroup = 'Converted/utils'
    license = 'Apache V2'
    vendor = 'ExBin Project'
    description = 'Free and open source binary/hexadecimal viewer/editor and component written in Java.'
    distribution = 'Linux'
    url = 'https://bined.exbin.org'

    from ('src/ospackage/bined') {
        into '/usr/bin'
    }

    from ('src/ospackage/bined.desktop') {
        into '/usr/share/applications'
    }

    from ('src/ospackage/bined.png') {
        into '/usr/share/pixmaps'
    }

    from (project(':tools:bined-editor').jar) {
        rename { filename -> "bined.jar" }
        into '/usr/share/bined'
    }

    from ('src/dist/readme.txt') {
        into '/usr/share/bined'
    }

    project(':tools:bined-editor').plugins.withType(JavaPlugin) {
        from(project(':tools:bined-editor').configurations.runtimeClasspath) {
            into('/usr/share/bined/lib')
            include '*'
        }
    }
}

buildRpm {
    from ('src/ospackage/bined.png') {
        addParentDirs = false
        into '/usr/share/pixmaps'
    }

    requires('jre', '1.8.0', GREATER | EQUAL)
}

buildDeb {
    arch = 'all'
    requires('default-jre', '1.8.0', GREATER | EQUAL)
}

if (!project.gradle.startParameter.projectProperties.containsKey("moduleDep")) {
    distZip {
        archiveName 'bined-' + version + '.zip'
    }

    distributions {
        main {
            contents {
                duplicatesStrategy = 'exclude'
                from project(':tools:bined-editor').jar

                from project.rootDir
                include 'LICENSE-2.0.txt'
                include 'changes.txt'

                from 'src/dist'
                include 'readme.txt'
                include 'bined.sh'
                //                include 'bined.bat'
                include 'plugins/*'

                from project(':tools:bined-editor').projectDir.absolutePath + '/build/launch4j'
                include "Bined.exe"

                //            into('lib') {
                //                from 'lib'
                //            }

                into('') {
                    from project(':tools:bined-editor').jar.archivePath
                    include '*'
                    rename { filename -> "bined.jar" }
                }

                project(':tools:bined-editor').plugins.withType(JavaPlugin) {
                    into('lib') {
                        from project(':tools:bined-editor').configurations.runtimeClasspath
                        include '*'
                    }
                }

                //            into('doc') {
                //                from 'doc'
                //                include '**'
                //            }
                //            into('resources') {
                //                from 'resources'
                //                include '**'
                //                exclude 'private'
                //            }
            }
        }
    }
}
