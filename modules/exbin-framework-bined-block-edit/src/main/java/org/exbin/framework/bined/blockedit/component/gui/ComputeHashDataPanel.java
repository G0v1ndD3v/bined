/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.bined.blockedit.component.gui;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.swing.DefaultComboBoxModel;
import org.exbin.framework.utils.LanguageUtils;
import org.exbin.framework.utils.WindowUtils;

/**
 * Fill simple data component panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class ComputeHashDataPanel extends javax.swing.JPanel {

    private final java.util.ResourceBundle resourceBundle = LanguageUtils.getResourceBundleByClass(ComputeHashDataPanel.class);

    private Controller controller;
    private ModeChangeListener modeChangeListener = null;

    public ComputeHashDataPanel() {
        initComponents();
        init();
    }

    private void init() {
        DefaultComboBoxModel<String> hashTypesModel = new DefaultComboBoxModel<>();
        for (HashType hashType : HashType.values()) {
            hashTypesModel.addElement(hashType.name());
        }
        hashTypeComboBox.setModel(hashTypesModel);
    }

    @Nonnull
    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    public void setController(Controller controller) {
        this.controller = controller;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fillWithbuttonGroup = new javax.swing.ButtonGroup();
        hashTypeLabel = new javax.swing.JLabel();
        hashTypeComboBox = new javax.swing.JComboBox<>();
        hashBitSizeLabel = new javax.swing.JLabel();
        hashBitSizeComboBox = new javax.swing.JComboBox<>();

        hashTypeLabel.setText(resourceBundle.getString("hashTypeLabel.text")); // NOI18N

        hashBitSizeLabel.setText(resourceBundle.getString("hashBitSizeLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hashTypeComboBox, 0, 405, Short.MAX_VALUE)
                    .addComponent(hashBitSizeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hashTypeLabel)
                            .addComponent(hashBitSizeLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hashTypeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hashBitSizeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashBitSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(157, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void modeChanged() {
        if (modeChangeListener != null) {
            modeChangeListener.modeChanged();
        }
    }

    @Nonnull
    public HashType getHashType() {
        return HashType.values()[hashTypeComboBox.getSelectedIndex()];
    }

    public void setHashType(HashType hashType) {
        hashTypeComboBox.setSelectedIndex(hashType.ordinal());
    }

    public int getBitSize() {
        // TODO
        return 0;
    }

    public void setModeChangeListener(ModeChangeListener modeChangeListener) {
        this.modeChangeListener = modeChangeListener;
    }

    public void initFocus() {
        hashTypeComboBox.requestFocus();
    }

    public void acceptInput() {
    }

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        WindowUtils.invokeDialog(new ComputeHashDataPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup fillWithbuttonGroup;
    private javax.swing.JComboBox<String> hashBitSizeComboBox;
    private javax.swing.JLabel hashBitSizeLabel;
    private javax.swing.JComboBox<String> hashTypeComboBox;
    private javax.swing.JLabel hashTypeLabel;
    // End of variables declaration//GEN-END:variables

    public enum HashType {
        KECCAK,
        MD2,
        MD4,
        MD5,
        RIPEMD,
        SHA1,
        SHA224,
        SHA256,
        SHA384,
        SHA512,
        SHA3,
        SHAKE,
        SM3,
        TIGER,
        GOST3411,
        WHIRLPOOL;
        
        public static Map<HashType, List<Integer>> BIT_SIZES = new HashMap<HashType, List<Integer>>() {{
            put(KECCAK, Arrays.asList(224, 256, 288, 384, 512));
            put(RIPEMD, Arrays.asList(128, 160, 256, 320));
            put(SHA3, Arrays.asList(224, 256, 384, 512));
            put(SHAKE, Arrays.asList(128, 256));
        }};
    }

    public interface Controller {

    }

    public interface ModeChangeListener {

        void modeChanged();
    }
}
