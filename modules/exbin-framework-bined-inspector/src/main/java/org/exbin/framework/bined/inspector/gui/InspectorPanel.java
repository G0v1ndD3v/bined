/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.bined.inspector.gui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ItemEvent;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.swing.JComponent;
import org.exbin.bined.operation.undo.BinaryDataUndoRedo;
import org.exbin.bined.swing.section.SectCodeArea;
import org.exbin.framework.language.api.LanguageModuleApi;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.framework.App;
import org.exbin.framework.bined.inspector.BinedInspectorModule;
import org.exbin.framework.bined.inspector.InspectorComponent;
import org.exbin.framework.utils.TestApplication;
import org.exbin.framework.utils.UtilsModule;

/**
 * Inspector side panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class InspectorPanel extends javax.swing.JPanel {

    private final java.util.ResourceBundle resourceBundle = App.getModule(LanguageModuleApi.class).getBundle(InspectorPanel.class);
    private SectCodeArea codeArea;
    private BinaryDataUndoRedo undoRedo;
    private JComponent component = null;
    private boolean syncUpdate = false;

    public InspectorPanel() {
        initComponents();
        init();
    }
    
    private void init() {
        Dimension dimension = new java.awt.Dimension(250, 10);
        setMinimumSize(dimension);
        setPreferredSize(dimension);
        inspectorComboBox.addItemListener((ItemEvent e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                pageChanged();
            }
        });
        pageChanged();
    }
    
    private void pageChanged() {
        if (component != null) {
            remove(component);
        }
        component = null;
        switch (inspectorComboBox.getSelectedIndex()) {
            case 0:
                BasicValuesPanel valuesPanel = new BasicValuesPanel();
                valuesPanel.setCodeArea(codeArea, undoRedo);
                if (syncUpdate) {
                    valuesPanel.enableUpdate();
                }
                component = valuesPanel;
                break;
            case 1:
                BinedInspectorModule binedInspectorModule = App.getModule(BinedInspectorModule.class);
                InspectorComponent altInspector = binedInspectorModule.getAltInspector();
                if (altInspector != null) {
                    component = altInspector.createComponent();
                    altInspector.setCodeArea(codeArea);
                } else {
                    throw new UnsupportedOperationException("Not supported yet.");
                }
                
                break;

            default:
                throw new AssertionError();
        }
        if (component != null) {
            add(component, BorderLayout.CENTER);
        }
        revalidate();
        repaint();
    }

    public void setCodeArea(SectCodeArea codeArea, @Nullable BinaryDataUndoRedo undoRedo) {
        this.codeArea = codeArea;
        this.undoRedo = undoRedo;

        if (component instanceof BasicValuesPanel) {
            ((BasicValuesPanel) component).setCodeArea(codeArea, undoRedo);
        }
    }

    public void enableUpdate() {
        syncUpdate = true;
        if (component instanceof BasicValuesPanel) {
            ((BasicValuesPanel) component).enableUpdate();
        }
    }

    public void disableUpdate() {
        syncUpdate = false;
        if (component instanceof BasicValuesPanel) {
            ((BasicValuesPanel) component).disableUpdate();
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inspectorComboBox = new javax.swing.JComboBox<>();

        setLayout(new java.awt.BorderLayout());

        inspectorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Basic Values", "Pixel Map" }));
        add(inspectorComboBox, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        TestApplication testApplication = UtilsModule.createTestApplication();
        testApplication.launch(() -> {
            testApplication.addModule(org.exbin.framework.language.api.LanguageModuleApi.MODULE_ID, new org.exbin.framework.language.api.utils.TestLanguageModule());
            WindowUtils.invokeWindow(new InspectorPanel());
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> inspectorComboBox;
    // End of variables declaration//GEN-END:variables

}
