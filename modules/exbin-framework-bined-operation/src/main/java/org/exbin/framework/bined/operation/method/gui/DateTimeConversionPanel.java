/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.bined.operation.method.gui;

import java.util.ResourceBundle;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import org.exbin.framework.App;
import org.exbin.framework.bined.operation.method.DateTimeConversionMethod;
import org.exbin.framework.language.api.LanguageModuleApi;


@ParametersAreNonnullByDefault
public class DateTimeConversionPanel extends javax.swing.JPanel {

    private final java.util.ResourceBundle resourceBundle = App.getModule(LanguageModuleApi.class).getBundle(DateTimeConversionPanel.class);

    private ConfigChangeListener configChangeListener = null;

    public DateTimeConversionPanel() {
        initComponents();
        init();
    }

    private void init() {
        // Set default selections
        byteOrderComboBox.setSelectedIndex(0); // Big Endian
        dataSizeComboBox.setSelectedIndex(1);   // 64-bit
        timeUnitComboBox.setSelectedIndex(0);   // Seconds
    }

    @Nonnull
    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        configurationPanel = new javax.swing.JPanel();
        byteOrderLabel = new javax.swing.JLabel();
        byteOrderComboBox = new javax.swing.JComboBox<>();
        dataSizeLabel = new javax.swing.JLabel();
        dataSizeComboBox = new javax.swing.JComboBox<>();
        timeUnitLabel = new javax.swing.JLabel();
        timeUnitComboBox = new javax.swing.JComboBox<>();

        setLayout(new java.awt.BorderLayout());

        configurationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceBundle.getString("configurationPanel.title"))); // NOI18N

        byteOrderLabel.setText(resourceBundle.getString("byteOrderLabel.text")); // NOI18N

        byteOrderComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {
            resourceBundle.getString("byteOrder.bigEndian"),
            resourceBundle.getString("byteOrder.littleEndian")
        }));
        byteOrderComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                byteOrderComboBoxItemStateChanged(evt);
            }
        });

        dataSizeLabel.setText(resourceBundle.getString("dataSizeLabel.text")); // NOI18N

        dataSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {
            resourceBundle.getString("dataSize.int32"),
            resourceBundle.getString("dataSize.long64")
        }));
        dataSizeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dataSizeComboBoxItemStateChanged(evt);
            }
        });

        timeUnitLabel.setText(resourceBundle.getString("timeUnitLabel.text")); // NOI18N

        timeUnitComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {
            resourceBundle.getString("timeUnit.seconds"),
            resourceBundle.getString("timeUnit.milliseconds")
        }));
        timeUnitComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                timeUnitComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout configurationPanelLayout = new javax.swing.GroupLayout(configurationPanel);
        configurationPanel.setLayout(configurationPanelLayout);
        configurationPanelLayout.setHorizontalGroup(
            configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(byteOrderLabel)
                    .addComponent(dataSizeLabel)
                    .addComponent(timeUnitLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(byteOrderComboBox, 0, 200, Short.MAX_VALUE)
                    .addComponent(dataSizeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(timeUnitComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        configurationPanelLayout.setVerticalGroup(
            configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(byteOrderLabel)
                    .addComponent(byteOrderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataSizeLabel)
                    .addComponent(dataSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeUnitLabel)
                    .addComponent(timeUnitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(configurationPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void byteOrderComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_byteOrderComboBoxItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            fireConfigChanged();
        }
    }//GEN-LAST:event_byteOrderComboBoxItemStateChanged

    private void dataSizeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dataSizeComboBoxItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            fireConfigChanged();
        }
    }//GEN-LAST:event_dataSizeComboBoxItemStateChanged

    private void timeUnitComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_timeUnitComboBoxItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            fireConfigChanged();
        }
    }//GEN-LAST:event_timeUnitComboBoxItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> byteOrderComboBox;
    private javax.swing.JLabel byteOrderLabel;
    private javax.swing.JPanel configurationPanel;
    private javax.swing.JComboBox<String> dataSizeComboBox;
    private javax.swing.JLabel dataSizeLabel;
    private javax.swing.JComboBox<String> timeUnitComboBox;
    private javax.swing.JLabel timeUnitLabel;
    // End of variables declaration//GEN-END:variables

    public void initFocus() {
        byteOrderComboBox.requestFocus();
    }

    @Nonnull
    public DateTimeConversionMethod.ConversionConfig getConversionConfig() {
        DateTimeConversionMethod.ByteOrderType byteOrder = byteOrderComboBox.getSelectedIndex() == 0
                ? DateTimeConversionMethod.ByteOrderType.BIG_ENDIAN
                : DateTimeConversionMethod.ByteOrderType.LITTLE_ENDIAN;

        DateTimeConversionMethod.DataSize dataSize = dataSizeComboBox.getSelectedIndex() == 0
                ? DateTimeConversionMethod.DataSize.INT_32
                : DateTimeConversionMethod.DataSize.LONG_64;

        DateTimeConversionMethod.TimeUnit timeUnit = timeUnitComboBox.getSelectedIndex() == 0
                ? DateTimeConversionMethod.TimeUnit.SECONDS
                : DateTimeConversionMethod.TimeUnit.MILLISECONDS;

        return new DateTimeConversionMethod.ConversionConfig(byteOrder, dataSize, timeUnit);
    }

    public void setConfigChangeListener(ConfigChangeListener listener) {
        this.configChangeListener = listener;
    }

    private void fireConfigChanged() {
        if (configChangeListener != null) {
            configChangeListener.configChanged();
        }
    }

    @ParametersAreNonnullByDefault
    public interface ConfigChangeListener {
        void configChanged();
    }
}
