/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.bined.operation.component.gui;

import java.util.ResourceBundle;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import org.exbin.framework.App;
import org.exbin.framework.bined.operation.component.CompressionDataMethod;
import org.exbin.framework.language.api.LanguageModuleApi;


@ParametersAreNonnullByDefault
public class CompressionDataPanel extends javax.swing.JPanel {

    private final java.util.ResourceBundle resourceBundle = App.getModule(LanguageModuleApi.class).getBundle(CompressionDataPanel.class);

    private ConfigChangeListener configChangeListener = null;

    public CompressionDataPanel() {
        initComponents();
        init();
    }

    private void init() {
        // Set default selections
        compressRadioButton.setSelected(true);
        algorithmComboBox.setSelectedIndex(0); // GZIP
        autoDetectCheckBox.setSelected(true);
        updateStatistics(0, 0);
    }

    @Nonnull
    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        operationButtonGroup = new javax.swing.ButtonGroup();
        operationPanel = new javax.swing.JPanel();
        operationLabel = new javax.swing.JLabel();
        compressRadioButton = new javax.swing.JRadioButton();
        decompressRadioButton = new javax.swing.JRadioButton();
        algorithmLabel = new javax.swing.JLabel();
        algorithmComboBox = new javax.swing.JComboBox<>();
        autoDetectCheckBox = new javax.swing.JCheckBox();
        statisticsPanel = new javax.swing.JPanel();
        originalSizeLabel = new javax.swing.JLabel();
        originalSizeValueLabel = new javax.swing.JLabel();
        compressedSizeLabel = new javax.swing.JLabel();
        compressedSizeValueLabel = new javax.swing.JLabel();
        compressionRatioLabel = new javax.swing.JLabel();
        compressionRatioValueLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        operationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceBundle.getString("operationPanel.title"))); // NOI18N

        operationLabel.setText(resourceBundle.getString("operationLabel.text")); // NOI18N

        operationButtonGroup.add(compressRadioButton);
        compressRadioButton.setSelected(true);
        compressRadioButton.setText(resourceBundle.getString("compressRadioButton.text")); // NOI18N
        compressRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                compressRadioButtonItemStateChanged(evt);
            }
        });

        operationButtonGroup.add(decompressRadioButton);
        decompressRadioButton.setText(resourceBundle.getString("decompressRadioButton.text")); // NOI18N
        decompressRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                decompressRadioButtonItemStateChanged(evt);
            }
        });

        algorithmLabel.setText(resourceBundle.getString("algorithmLabel.text")); // NOI18N

        algorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {
            resourceBundle.getString("algorithm.gzip"),
            resourceBundle.getString("algorithm.zip"),
            resourceBundle.getString("algorithm.deflate")
        }));
        algorithmComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                algorithmComboBoxItemStateChanged(evt);
            }
        });

        autoDetectCheckBox.setSelected(true);
        autoDetectCheckBox.setText(resourceBundle.getString("autoDetectCheckBox.text")); // NOI18N
        autoDetectCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                autoDetectCheckBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout operationPanelLayout = new javax.swing.GroupLayout(operationPanel);
        operationPanel.setLayout(operationPanelLayout);
        operationPanelLayout.setHorizontalGroup(
            operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(autoDetectCheckBox)
                    .addGroup(operationPanelLayout.createSequentialGroup()
                        .addGroup(operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(operationLabel)
                            .addComponent(algorithmLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(operationPanelLayout.createSequentialGroup()
                                .addComponent(compressRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(decompressRadioButton)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        operationPanelLayout.setVerticalGroup(
            operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(operationLabel)
                    .addComponent(compressRadioButton)
                    .addComponent(decompressRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(algorithmLabel)
                    .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoDetectCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(operationPanel, java.awt.BorderLayout.CENTER);

        statisticsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceBundle.getString("statisticsPanel.title"))); // NOI18N

        originalSizeLabel.setText(resourceBundle.getString("originalSizeLabel.text")); // NOI18N

        originalSizeValueLabel.setText("0 bytes");

        compressedSizeLabel.setText(resourceBundle.getString("compressedSizeLabel.text")); // NOI18N

        compressedSizeValueLabel.setText("0 bytes");

        compressionRatioLabel.setText(resourceBundle.getString("compressionRatioLabel.text")); // NOI18N

        compressionRatioValueLabel.setText("0.0%");

        javax.swing.GroupLayout statisticsPanelLayout = new javax.swing.GroupLayout(statisticsPanel);
        statisticsPanel.setLayout(statisticsPanelLayout);
        statisticsPanelLayout.setHorizontalGroup(
            statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statisticsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(originalSizeLabel)
                    .addComponent(compressedSizeLabel)
                    .addComponent(compressionRatioLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(originalSizeValueLabel)
                    .addComponent(compressedSizeValueLabel)
                    .addComponent(compressionRatioValueLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        statisticsPanelLayout.setVerticalGroup(
            statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statisticsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(originalSizeLabel)
                    .addComponent(originalSizeValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compressedSizeLabel)
                    .addComponent(compressedSizeValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compressionRatioLabel)
                    .addComponent(compressionRatioValueLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(statisticsPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void compressRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_compressRadioButtonItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            fireConfigChanged();
        }
    }//GEN-LAST:event_compressRadioButtonItemStateChanged

    private void decompressRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_decompressRadioButtonItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            fireConfigChanged();
        }
    }//GEN-LAST:event_decompressRadioButtonItemStateChanged

    private void algorithmComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_algorithmComboBoxItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            fireConfigChanged();
        }
    }//GEN-LAST:event_algorithmComboBoxItemStateChanged

    private void autoDetectCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_autoDetectCheckBoxItemStateChanged
        fireConfigChanged();
    }//GEN-LAST:event_autoDetectCheckBoxItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> algorithmComboBox;
    private javax.swing.JLabel algorithmLabel;
    private javax.swing.JCheckBox autoDetectCheckBox;
    private javax.swing.JLabel compressedSizeLabel;
    private javax.swing.JLabel compressedSizeValueLabel;
    private javax.swing.JRadioButton compressRadioButton;
    private javax.swing.JLabel compressionRatioLabel;
    private javax.swing.JLabel compressionRatioValueLabel;
    private javax.swing.JRadioButton decompressRadioButton;
    private javax.swing.ButtonGroup operationButtonGroup;
    private javax.swing.JLabel operationLabel;
    private javax.swing.JPanel operationPanel;
    private javax.swing.JLabel originalSizeLabel;
    private javax.swing.JLabel originalSizeValueLabel;
    private javax.swing.JPanel statisticsPanel;
    // End of variables declaration//GEN-END:variables

    public void initFocus() {
        compressRadioButton.requestFocus();
    }

    @Nonnull
    public CompressionDataMethod.OperationType getOperationType() {
        return compressRadioButton.isSelected()
                ? CompressionDataMethod.OperationType.COMPRESS
                : CompressionDataMethod.OperationType.DECOMPRESS;
    }

    @Nonnull
    public CompressionDataMethod.CompressionAlgorithm getAlgorithm() {
        switch (algorithmComboBox.getSelectedIndex()) {
            case 0:
                return CompressionDataMethod.CompressionAlgorithm.GZIP;
            case 1:
                return CompressionDataMethod.CompressionAlgorithm.ZIP;
            case 2:
                return CompressionDataMethod.CompressionAlgorithm.DEFLATE;
            default:
                return CompressionDataMethod.CompressionAlgorithm.GZIP;
        }
    }

    public boolean isAutoDetect() {
        return autoDetectCheckBox.isSelected();
    }

    public void updateStatistics(long originalSize, long compressedSize) {
        originalSizeValueLabel.setText(formatSize(originalSize));
        compressedSizeValueLabel.setText(formatSize(compressedSize));

        if (originalSize > 0) {
            double ratio = (double) compressedSize / originalSize * 100.0;
            compressionRatioValueLabel.setText(String.format("%.1f%%", ratio));
        } else {
            compressionRatioValueLabel.setText("0.0%");
        }
    }

    private String formatSize(long bytes) {
        if (bytes < 1024) {
            return bytes + " bytes";
        } else if (bytes < 1024 * 1024) {
            return String.format("%.2f KB", bytes / 1024.0);
        } else if (bytes < 1024 * 1024 * 1024) {
            return String.format("%.2f MB", bytes / (1024.0 * 1024.0));
        } else {
            return String.format("%.2f GB", bytes / (1024.0 * 1024.0 * 1024.0));
        }
    }

    public void setConfigChangeListener(ConfigChangeListener listener) {
        this.configChangeListener = listener;
    }

    private void fireConfigChanged() {
        if (configChangeListener != null) {
            configChangeListener.configChanged();
        }
    }

    @ParametersAreNonnullByDefault
    public interface ConfigChangeListener {
        void configChanged();
    }
}
